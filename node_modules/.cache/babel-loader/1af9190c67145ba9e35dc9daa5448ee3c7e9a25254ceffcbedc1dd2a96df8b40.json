{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alma\\\\Desktop\\\\ebano_bronce2\\\\src\\\\components\\\\sesion\\\\Register.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useAuth } from '../../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const {\n    login\n  } = useAuth();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [users, setUsers] = useState([]); // Simulamos un almacenamiento de usuarios\n  const [error, setError] = useState(''); // Para mostrar errores\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!username || !password) {\n      setError('Por favor ingrese todos los campos.');\n      return;\n    }\n\n    // Crear nuevo usuario y asignarles un rol básico\n    const newUser = {\n      username,\n      password,\n      role: 'Usuario'\n    };\n\n    // Comprobamos si el usuario ya existe\n    const userExists = users.some(user => user.username === username);\n    if (userExists) {\n      setError('El usuario ya existe.');\n      return;\n    }\n    setUsers([...users, newUser]); // Añadir el usuario al \"almacenamiento\"\n    login({\n      username\n    }, 'Usuario'); // Hacer login automáticamente con el nuevo usuario\n\n    // Limpiar los campos y el error tras el registro exitoso\n    setUsername('');\n    setPassword('');\n    setError('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Registrarse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: 'red'\n        },\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 19\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Usuario\",\n        value: username,\n        onChange: e => setUsername(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        placeholder: \"Contrase\\xF1a\",\n        value: password,\n        onChange: e => setPassword(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !username || !password,\n        children: \"Registrarse\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_s(Register, \"d8AufuPKB9HIspC+sxyl920NzkY=\", false, function () {\n  return [useAuth];\n});\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["React","useState","useAuth","jsxDEV","_jsxDEV","Register","_s","login","username","setUsername","password","setPassword","users","setUsers","error","setError","handleSubmit","e","preventDefault","newUser","role","userExists","some","user","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","style","color","type","placeholder","value","onChange","target","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Alma/Desktop/ebano_bronce2/src/components/sesion/Register.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useAuth } from '../../context/AuthContext';\r\n\r\nconst Register = () => {\r\n  const { login } = useAuth();\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [users, setUsers] = useState([]); // Simulamos un almacenamiento de usuarios\r\n  const [error, setError] = useState(''); // Para mostrar errores\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!username || !password) {\r\n      setError('Por favor ingrese todos los campos.');\r\n      return;\r\n    }\r\n\r\n    // Crear nuevo usuario y asignarles un rol básico\r\n    const newUser = { username, password, role: 'Usuario' };\r\n\r\n    // Comprobamos si el usuario ya existe\r\n    const userExists = users.some(user => user.username === username);\r\n    if (userExists) {\r\n      setError('El usuario ya existe.');\r\n      return;\r\n    }\r\n\r\n    setUsers([...users, newUser]); // Añadir el usuario al \"almacenamiento\"\r\n    login({ username }, 'Usuario'); // Hacer login automáticamente con el nuevo usuario\r\n\r\n    // Limpiar los campos y el error tras el registro exitoso\r\n    setUsername('');\r\n    setPassword('');\r\n    setError('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <h3>Registrarse</h3>\r\n        {error && <p style={{ color: 'red' }}>{error}</p>}\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Usuario\"\r\n          value={username}\r\n          onChange={(e) => setUsername(e.target.value)}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          placeholder=\"Contraseña\"\r\n          value={password}\r\n          onChange={(e) => setPassword(e.target.value)}\r\n        />\r\n        <button type=\"submit\" disabled={!username || !password}>Registrarse</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}