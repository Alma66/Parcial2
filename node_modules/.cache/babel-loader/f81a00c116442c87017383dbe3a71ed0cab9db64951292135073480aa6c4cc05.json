{"ast":null,"code":"import React,{createContext,useContext,useState}from'react';// SimulamR una DB usurios y roles\nimport{jsx as _jsx}from\"react/jsx-runtime\";let fakeUsersDB=[{username:'admin',password:'admin123',role:'Administrador'},{username:'user1',password:'user123',role:'Usuario'},{username:'user2',password:'user123',role:'Usuario'}];// Crear  el contexto de autenticación\nconst AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);// Estado para almacenar user actual\nconst[users,setUsers]=useState(fakeUsersDB);// Lista de usuarios\n// Función = iniciar sesión\nconst login=(username,password)=>{// Busca el usuario  = nombre y password\nconst foundUser=users.find(user=>user.username===username&&user.password===password);if(foundUser){setUser(foundUser);return null;}else{return'Usuario o contraseña incorrectos';}};const register=(username,password)=>{const userExists=users.some(user=>user.username===username);if(userExists){return'El usuario ya existe.';}// Si el usuario no existe, lo agrega a la lista\nconst newUser={username,password,role:'Usuario'};setUsers([...users,newUser]);// Actualizar lista de usuarios\nsetUser(newUser);return null;};// Función = cerrar sesión\nconst logout=()=>setUser(null);// Función = actualizar roles\nconst updateUserRole=(username,newRole)=>{setUsers(prevUsers=>prevUsers.map(u=>u.username===username?{...u,role:newRole}:u));};// Función = eliminar usuarios\nconst deleteUser=username=>{setUsers(prevUsers=>prevUsers.filter(u=>u.username!==username));};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,users,login,logout,register,updateUserRole,deleteUser},children:children});};export const useAuth=()=>useContext(AuthContext);","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","fakeUsersDB","username","password","role","AuthContext","AuthProvider","_ref","children","user","setUser","users","setUsers","login","foundUser","find","register","userExists","some","newUser","logout","updateUserRole","newRole","prevUsers","map","u","deleteUser","filter","Provider","value","useAuth"],"sources":["C:/Users/Alma/Desktop/ebano_bronce2/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// SimulamR una DB usurios y roles\r\nlet fakeUsersDB = [\r\n  { username: 'admin', password: 'admin123', role: 'Administrador' },\r\n  { username: 'user1', password: 'user123', role: 'Usuario' },\r\n  { username: 'user2', password: 'user123', role: 'Usuario' }\r\n];\r\n\r\n// Crear  el contexto de autenticación\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null); // Estado para almacenar user actual\r\n  const [users, setUsers] = useState(fakeUsersDB); // Lista de usuarios\r\n\r\n  // Función = iniciar sesión\r\n  const login = (username, password) => {\r\n    // Busca el usuario  = nombre y password\r\n    const foundUser = users.find(\r\n      (user) => user.username === username && user.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      setUser(foundUser);\r\n      return null;\r\n    } else {\r\n      return 'Usuario o contraseña incorrectos';\r\n    }\r\n  };\r\n\r\n  const register = (username, password) => {\r\n    const userExists = users.some((user) => user.username === username);\r\n    if (userExists) {\r\n      return 'El usuario ya existe.';\r\n    }\r\n\r\n        // Si el usuario no existe, lo agrega a la lista\r\n    const newUser = { username, password, role: 'Usuario' };\r\n    setUsers([...users, newUser]); // Actualizar lista de usuarios\r\n    setUser(newUser);\r\n    return null;\r\n  };\r\n\r\n  // Función = cerrar sesión\r\n  const logout = () => setUser(null);\r\n\r\n  // Función = actualizar roles\r\n  const updateUserRole = (username, newRole) => {\r\n    setUsers((prevUsers) =>\r\n      prevUsers.map((u) =>\r\n        u.username === username ? { ...u, role: newRole } : u\r\n      )\r\n    );\r\n  };\r\n\r\n  // Función = eliminar usuarios\r\n  const deleteUser = (username) => {\r\n    setUsers((prevUsers) => prevUsers.filter((u) => u.username !== username));\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, users, login, logout, register, updateUserRole, deleteUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}