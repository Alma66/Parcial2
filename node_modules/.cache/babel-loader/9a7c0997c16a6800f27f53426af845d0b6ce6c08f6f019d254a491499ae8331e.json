{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alma\\\\Desktop\\\\ebano_bronce2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// SimulamR una DB \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet fakeUsersDB = [{\n  username: 'admin',\n  password: 'admin123',\n  role: 'Administrador'\n}, {\n  username: 'user1',\n  password: 'user123',\n  role: 'Usuario'\n}, {\n  username: 'user2',\n  password: 'user123',\n  role: 'Usuario'\n}];\n\n// Creamos el contexto de autenticación\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [users, setUsers] = useState(fakeUsersDB); // Lista de usuarios\n\n  const login = (username, password) => {\n    const foundUser = users.find(user => user.username === username && user.password === password);\n    if (foundUser) {\n      setUser(foundUser);\n      return null;\n    } else {\n      return 'Usuario o contraseña incorrectos';\n    }\n  };\n  const register = (username, password) => {\n    const userExists = users.some(user => user.username === username);\n    if (userExists) {\n      return 'El usuario ya existe.';\n    }\n    const newUser = {\n      username,\n      password,\n      role: 'Usuario'\n    };\n    setUsers([...users, newUser]); // Actualizar lista de usuarios\n    setUser(newUser);\n    return null;\n  };\n  const logout = () => setUser(null);\n\n  // Función para actualizar roles\n  const updateUserRole = (username, newRole) => {\n    setUsers(prevUsers => prevUsers.map(u => u.username === username ? {\n      ...u,\n      role: newRole\n    } : u));\n  };\n\n  // Función para eliminar usuarios\n  const deleteUser = username => {\n    setUsers(prevUsers => prevUsers.filter(u => u.username !== username));\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      users,\n      login,\n      logout,\n      register,\n      updateUserRole,\n      deleteUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"R0RDo4mkBmZKMCqKHz+D/xwMeEg=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","fakeUsersDB","username","password","role","AuthContext","AuthProvider","children","_s","user","setUser","users","setUsers","login","foundUser","find","register","userExists","some","newUser","logout","updateUserRole","newRole","prevUsers","map","u","deleteUser","filter","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Alma/Desktop/ebano_bronce2/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// SimulamR una DB \r\nlet fakeUsersDB = [\r\n  { username: 'admin', password: 'admin123', role: 'Administrador' },\r\n  { username: 'user1', password: 'user123', role: 'Usuario' },\r\n  { username: 'user2', password: 'user123', role: 'Usuario' }\r\n];\r\n\r\n// Creamos el contexto de autenticación\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [users, setUsers] = useState(fakeUsersDB); // Lista de usuarios\r\n\r\n  const login = (username, password) => {\r\n    const foundUser = users.find(\r\n      (user) => user.username === username && user.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      setUser(foundUser);\r\n      return null;\r\n    } else {\r\n      return 'Usuario o contraseña incorrectos';\r\n    }\r\n  };\r\n\r\n  const register = (username, password) => {\r\n    const userExists = users.some((user) => user.username === username);\r\n    if (userExists) {\r\n      return 'El usuario ya existe.';\r\n    }\r\n\r\n    const newUser = { username, password, role: 'Usuario' };\r\n    setUsers([...users, newUser]); // Actualizar lista de usuarios\r\n    setUser(newUser);\r\n    return null;\r\n  };\r\n\r\n  const logout = () => setUser(null);\r\n\r\n  // Función para actualizar roles\r\n  const updateUserRole = (username, newRole) => {\r\n    setUsers((prevUsers) =>\r\n      prevUsers.map((u) =>\r\n        u.username === username ? { ...u, role: newRole } : u\r\n      )\r\n    );\r\n  };\r\n\r\n  // Función para eliminar usuarios\r\n  const deleteUser = (username) => {\r\n    setUsers((prevUsers) => prevUsers.filter((u) => u.username !== username));\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, users, login, logout, register, updateUserRole, deleteUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}