{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alma\\\\Desktop\\\\ebano_bronce2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// AuthContext.js\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n\n  // Función para simular inicio de sesión\n  const login = (username, password) => {\n    // Buscar al usuario en nuestra \"base de datos\"\n    const foundUser = fakeUsersDB.find(user => user.username === username && user.password === password);\n    if (foundUser) {\n      setUser(foundUser); // Si encontramos al usuario, lo autenticamos\n      return null; // Retorna null si el login es exitoso\n    } else {\n      return 'Usuario o contraseña incorrectos'; // Retorna el error si no se encuentra al usuario\n    }\n  };\n\n  // Función para cerrar sesión\n  const logout = () => setUser(null);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Iei9RGtZU29Y1RhBe1sbfh/MntA=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["AuthProvider","children","_s","user","setUser","useState","login","username","password","foundUser","fakeUsersDB","find","logout","_jsxDEV","AuthContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Alma/Desktop/ebano_bronce2/src/context/AuthContext.js"],"sourcesContent":["// AuthContext.js\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n\r\n  // Función para simular inicio de sesión\r\n  const login = (username, password) => {\r\n    // Buscar al usuario en nuestra \"base de datos\"\r\n    const foundUser = fakeUsersDB.find(\r\n      (user) => user.username === username && user.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      setUser(foundUser); // Si encontramos al usuario, lo autenticamos\r\n      return null; // Retorna null si el login es exitoso\r\n    } else {\r\n      return 'Usuario o contraseña incorrectos'; // Retorna el error si no se encuentra al usuario\r\n    }\r\n  };\r\n\r\n  // Función para cerrar sesión\r\n  const logout = () => setUser(null);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAO,MAAMA,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGC,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,MAAMC,KAAK,GAAGA,CAACC,QAAQ,EAAEC,QAAQ,KAAK;IACpC;IACA,MAAMC,SAAS,GAAGC,WAAW,CAACC,IAAI,CAC/BR,IAAI,IAAKA,IAAI,CAACI,QAAQ,KAAKA,QAAQ,IAAIJ,IAAI,CAACK,QAAQ,KAAKA,QAC5D,CAAC;IAED,IAAIC,SAAS,EAAE;MACbL,OAAO,CAACK,SAAS,CAAC,CAAC,CAAC;MACpB,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,MAAM;MACL,OAAO,kCAAkC,CAAC,CAAC;IAC7C;EACF,CAAC;;EAED;EACA,MAAMG,MAAM,GAAGA,CAAA,KAAMR,OAAO,CAAC,IAAI,CAAC;EAElC,oBACES,OAAA,CAACC,WAAW,CAACC,QAAQ;IAACC,KAAK,EAAE;MAAEb,IAAI;MAAEG,KAAK;MAAEM;IAAO,CAAE;IAAAX,QAAA,EAClDA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAClB,EAAA,CA1BWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}