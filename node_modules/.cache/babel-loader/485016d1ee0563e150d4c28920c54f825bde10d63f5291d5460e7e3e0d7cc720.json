{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Alma\\\\Desktop\\\\ebano_bronce2\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\n\n// Simulamos una \"base de datos\" de usuarios con roles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet fakeUsersDB = [{\n  username: 'admin',\n  password: 'admin123',\n  role: 'Administrador'\n}, {\n  username: 'user1',\n  password: 'user123',\n  role: 'Usuario'\n}, {\n  username: 'user2',\n  password: 'user123',\n  role: 'Usuario'\n}];\n\n// Creamos el contexto de autenticación\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Componente proveedor de autenticación\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const navigate = useNavigate();\n  // Función para simular inicio de sesión\n  const login = (username, password) => {\n    // Buscar al usuario en nuestra \"base de datos\"\n    const foundUser = fakeUsersDB.find(user => user.username === username && user.password === password);\n    if (foundUser) {\n      setUser(foundUser); // Si encontramos al usuario, lo autenticamos\n      return null; // Retorna null si el login es exitoso\n    } else {\n      return 'Usuario o contraseña incorrectos'; // Retorna el error si no se encuentra al usuario\n    }\n  };\n\n  // Función para registrar un nuevo usuario\n  // Función para registrar un nuevo usuario\n  const register = (username, password) => {\n    // Comprobamos si el usuario ya existe\n    const userExists = fakeUsersDB.some(user => user.username === username);\n    if (userExists) {\n      return 'El usuario ya existe.';\n    }\n\n    // Crear nuevo usuario y asignarles un rol básico\n    const newUser = {\n      username,\n      password,\n      role: 'Usuario'\n    };\n    fakeUsersDB.push(newUser); // Añadir el usuario al \"almacenamiento\"\n\n    // Llamar a login para autenticar al nuevo usuario\n    setUser(newUser);\n    return null; // Retorna null si todo fue bien\n  };\n\n  // Función para cerrar sesión\n  const logout = () => setUser(null);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      login,\n      logout,\n      register\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook para acceder al contexto de autenticación\n_s(AuthProvider, \"6IF8oi2v+FFFMVJXFQinFj68c40=\", true);\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","fakeUsersDB","username","password","role","AuthContext","AuthProvider","children","_s","user","setUser","navigate","useNavigate","login","foundUser","find","register","userExists","some","newUser","push","logout","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Alma/Desktop/ebano_bronce2/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\r\n\r\n// Simulamos una \"base de datos\" de usuarios con roles\r\nlet fakeUsersDB = [\r\n  { username: 'admin', password: 'admin123', role: 'Administrador' },\r\n  { username: 'user1', password: 'user123', role: 'Usuario' },\r\n  { username: 'user2', password: 'user123', role: 'Usuario' }\r\n];\r\n\r\n// Creamos el contexto de autenticación\r\nconst AuthContext = createContext();\r\n\r\n// Componente proveedor de autenticación\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const navigate = useNavigate();  \r\n  // Función para simular inicio de sesión\r\n  const login = (username, password) => {\r\n    // Buscar al usuario en nuestra \"base de datos\"\r\n    const foundUser = fakeUsersDB.find(\r\n      (user) => user.username === username && user.password === password\r\n    );\r\n\r\n    if (foundUser) {\r\n      setUser(foundUser); // Si encontramos al usuario, lo autenticamos\r\n      return null; // Retorna null si el login es exitoso\r\n    } else {\r\n      return 'Usuario o contraseña incorrectos'; // Retorna el error si no se encuentra al usuario\r\n    }\r\n  };\r\n\r\n  // Función para registrar un nuevo usuario\r\n  // Función para registrar un nuevo usuario\r\nconst register = (username, password) => {\r\n  // Comprobamos si el usuario ya existe\r\n  const userExists = fakeUsersDB.some(user => user.username === username);\r\n  if (userExists) {\r\n    return 'El usuario ya existe.';\r\n  }\r\n\r\n  // Crear nuevo usuario y asignarles un rol básico\r\n  const newUser = { username, password, role: 'Usuario' };\r\n  fakeUsersDB.push(newUser); // Añadir el usuario al \"almacenamiento\"\r\n\r\n  // Llamar a login para autenticar al nuevo usuario\r\n  setUser(newUser);\r\n\r\n  return null; // Retorna null si todo fue bien\r\n};\r\n\r\n\r\n  // Función para cerrar sesión\r\n  const logout = () => setUser(null);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, login, logout, register }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook para acceder al contexto de autenticación\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,IAAIC,WAAW,GAAG,CAChB;EAAEC,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,UAAU;EAAEC,IAAI,EAAE;AAAgB,CAAC,EAClE;EAAEF,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAU,CAAC,EAC3D;EAAEF,QAAQ,EAAE,OAAO;EAAEC,QAAQ,EAAE,SAAS;EAAEC,IAAI,EAAE;AAAU,CAAC,CAC5D;;AAED;AACA,MAAMC,WAAW,gBAAGT,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMU,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EACtC,MAAMa,QAAQ,GAAGC,WAAW,CAAC,CAAC;EAC9B;EACA,MAAMC,KAAK,GAAGA,CAACX,QAAQ,EAAEC,QAAQ,KAAK;IACpC;IACA,MAAMW,SAAS,GAAGb,WAAW,CAACc,IAAI,CAC/BN,IAAI,IAAKA,IAAI,CAACP,QAAQ,KAAKA,QAAQ,IAAIO,IAAI,CAACN,QAAQ,KAAKA,QAC5D,CAAC;IAED,IAAIW,SAAS,EAAE;MACbJ,OAAO,CAACI,SAAS,CAAC,CAAC,CAAC;MACpB,OAAO,IAAI,CAAC,CAAC;IACf,CAAC,MAAM;MACL,OAAO,kCAAkC,CAAC,CAAC;IAC7C;EACF,CAAC;;EAED;EACA;EACF,MAAME,QAAQ,GAAGA,CAACd,QAAQ,EAAEC,QAAQ,KAAK;IACvC;IACA,MAAMc,UAAU,GAAGhB,WAAW,CAACiB,IAAI,CAACT,IAAI,IAAIA,IAAI,CAACP,QAAQ,KAAKA,QAAQ,CAAC;IACvE,IAAIe,UAAU,EAAE;MACd,OAAO,uBAAuB;IAChC;;IAEA;IACA,MAAME,OAAO,GAAG;MAAEjB,QAAQ;MAAEC,QAAQ;MAAEC,IAAI,EAAE;IAAU,CAAC;IACvDH,WAAW,CAACmB,IAAI,CAACD,OAAO,CAAC,CAAC,CAAC;;IAE3B;IACAT,OAAO,CAACS,OAAO,CAAC;IAEhB,OAAO,IAAI,CAAC,CAAC;EACf,CAAC;;EAGC;EACA,MAAME,MAAM,GAAGA,CAAA,KAAMX,OAAO,CAAC,IAAI,CAAC;EAElC,oBACEV,OAAA,CAACK,WAAW,CAACiB,QAAQ;IAACC,KAAK,EAAE;MAAEd,IAAI;MAAEI,KAAK;MAAEQ,MAAM;MAAEL;IAAS,CAAE;IAAAT,QAAA,EAC5DA;EAAQ;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAnB,EAAA,CAhDaF,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AAiDzB,OAAO,MAAMuB,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjC,UAAU,CAACQ,WAAW,CAAC;AAAA;AAACyB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}